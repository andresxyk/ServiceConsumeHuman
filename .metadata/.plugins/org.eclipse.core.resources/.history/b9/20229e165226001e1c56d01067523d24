/**
 * 
 */
package com.mx.lacomer.restws.servicethird;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mx.sura.afore.registroweb.restws.constantes.Constantes;
import com.mx.sura.afore.registroweb.restws.dto.request.MessageErrorServicioProcesar;

/**
 * @author MXE01028159A
 *
 */
public class ConsumoServiciosThird {

	public static final Logger logger = LoggerFactory.getLogger(ConsumoServiciosThird.class);

	public static ResponseEntity<?> creaClientePostJsonRestMultiPart(Class<?> clazzResponse, List<File> fileList,
			Object requestEntity, String url, String usr, String pwd) throws JsonParseException, JsonMappingException, IOException {

		ResponseEntity<?> response;
		try {
			String json = toJson(requestEntity);

			MultiValueMap<String, Object> parts = new LinkedMultiValueMap<String, Object>();
			parts.add("input", json);
			for (File file : fileList) {
				FileSystemResource fileSystemResource = new FileSystemResource(file);
				parts.add("files", fileSystemResource);

			}

			RestTemplate restTemplate = new RestTemplate();
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.MULTIPART_FORM_DATA);
			if(usr!=null && pwd!=null && !usr.trim().equals(Constantes.EMPTY) && !pwd.trim().equals(Constantes.EMPTY))
					headers.setBasicAuth(usr.trim(), pwd.trim());

				
			HttpEntity<MultiValueMap<String, Object>> request1 = new HttpEntity<>(parts, headers);
			restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(Charset.forName(Constantes.UTF_8)));

			logger.info("Request to: " + url);
			logger.info(json);
			response = restTemplate.exchange(url, HttpMethod.POST, request1, clazzResponse);
			// response = restTemplate.postForEntity(url, request1, String.class);
			logger.info("Response to: ");
			logger.info(toJson(response.getBody()));
			for (File file : fileList) {
				file.delete();

			}
			return response;
		} catch (HttpStatusCodeException ex) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new ObjectMapper()
					.readValue(ex.getResponseBodyAsString(), MessageErrorServicioProcesar.class);
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			logger.info("Error al consumir el servicio: " + url + "---->" + response.getBody().toString());
			logger.info("Error al consumir el servicio: " + url + "---->" + response.getHeaders().toString());
			return response;
		} catch (RestClientException e) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new MessageErrorServicioProcesar();
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			
			return response;
		} catch (Exception e) {
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			response = new ResponseEntity<>(e.getMessage(), HttpStatus.PRECONDITION_FAILED);
			return response;
		}

	}

	public static ResponseEntity<?> creaClientePostJsonRest(Class<?> clazzResponse, Object request, String url,
			HttpHeaders headers) throws JsonMappingException, IOException {

		ResponseEntity<?> response;
		try {
			RestTemplate restTemplate = new RestTemplate();
			restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(Charset.forName(Constantes.UTF_8)));
			headers.setContentType(MediaType.APPLICATION_JSON);
			headers.add("charset", Constantes.UTF_8);

			String bd = toJson(request);
			HttpEntity<String> entity = new HttpEntity<String>(bd, headers);
			logger.info("Request to: " + url);
			logger.info(bd);
			response = restTemplate.exchange(url, HttpMethod.POST, entity, clazzResponse);
			logger.info("Response to: " + url);
			logger.info(toJson(response.getBody()));
			return response;
		} catch (HttpStatusCodeException ex) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new ObjectMapper()
					.readValue(ex.getResponseBodyAsString(), MessageErrorServicioProcesar.class);
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			logger.info("Error al consumir el servicio: " + url + "---->" + response.getBody().toString());
			logger.info("Error al consumir el servicio: " + url + "---->" + response.getHeaders().toString());
			return response;
		} catch (RestClientException e) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new MessageErrorServicioProcesar();
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			return response;
		} catch (Exception e) {
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			response = new ResponseEntity<>(e.getMessage(), HttpStatus.PRECONDITION_FAILED);
			return response;
		}

	}
	
	
	public static Object creaClientePostJsonRest(Class<?> clazzResponse, String url) throws JsonParseException, JsonMappingException, IOException {
		System.clearProperty("http.proxyHost");
		System.clearProperty("http.proxyPort");
		//System.setProperty("http.proxyHost", "10.212.241.112");
        //System.setProperty("http.proxyPort", "8080");
		ResponseEntity<?> response;
		try {
			RestTemplate restTemplate = new RestTemplate();
			restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(Charset.forName(Constantes.UTF_8)));
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			headers.add("charset", Constantes.UTF_8);
			HttpEntity<String> entity = new HttpEntity<String>(headers);
			response = restTemplate.exchange(url, HttpMethod.GET, entity, clazzResponse);
			//String val = restTemplate.getForObject(url, String.class);
			logger.info("Response to: " + url);
			logger.info(toJson(response.getBody()));
			return response.getBody();
		} catch (HttpStatusCodeException ex) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new ObjectMapper()
					.readValue(ex.getResponseBodyAsString(), MessageErrorServicioProcesar.class);
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			logger.info("Error al consumir el servicio: " + url + "---->" + response.toString());
			logger.info("Error al consumir el servicio: " + url + "---->" + response.toString());
			return response;
		} catch (RestClientException e) {
			MessageErrorServicioProcesar messageErrorServicioProcesar = new MessageErrorServicioProcesar();
			response = new ResponseEntity<>(messageErrorServicioProcesar, HttpStatus.PRECONDITION_FAILED);
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			return response;
		} catch (Exception e) {
			logger.info("Error al consumir el servicio: " + url + "---->" + e.getMessage());
			response = new ResponseEntity<>(e.getMessage(), HttpStatus.PRECONDITION_FAILED);
			return response;
		}

	}

	private static String toJson(Object object) throws JsonProcessingException {
		ObjectMapper om = new ObjectMapper();
		return om.writerWithDefaultPrettyPrinter().writeValueAsString(object);
	}

}
